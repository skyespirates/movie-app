declare var current: any;

import { useState, useRef, useCallback } from "react";
// config
import { IMAGE_BASE_URL, BACKDROP_SIZE, POSTER_SIZE } from "../config";

import type { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
// Fetch hook
import { useFetchMovies } from "../api/fetchHooks";
// components
import Header from "../components/Header";
import Hero from "../components/Hero";
import Grid from "../components/Grid";
import Card from "../components/Card";
import Spinner from "../components/Spinner";

const Home: NextPage = () => {
  const [query, setQuery] = useState("");
  const {
    data,
    fetchNextPage,
    isLoading,
    isFetching,
    error,
    isFetchingNextPage,
    hasNextPage,
  } = useFetchMovies(query);

  const intObserver = useRef<any>();
  const lastPostRef = useCallback(
    (post: any) => {
      if (isFetchingNextPage) return;

      if (intObserver.current) intObserver.current.disconnect();

      intObserver.current = new IntersectionObserver(
        ([entry]) => {
          if (entry.isIntersecting && hasNextPage) {
            fetchNextPage();
          }
        },
        { threshold: 1 }
      );

      if (post) intObserver.current.observe(post);
    },
    [isFetchingNextPage, fetchNextPage, hasNextPage]
  );

  const handleScroll = (event: React.UIEvent<HTMLElement>) => {
    const { scrollTop, clientHeight, scrollHeight } = event.currentTarget;
    if (scrollHeight - scrollTop === clientHeight) {
      fetchNextPage();
    }
  };
  if (error) {
    return <div>Something went wrong!!!</div>;
  }
  return (
    <div>
      <Head>
        <title>Movie Database</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main
        className="relative h-screen overflow-y-auto"
        onScroll={handleScroll}
      >
        <Header setQuery={setQuery} />
        {!query && data && data.pages ? (
          <Hero
            imgUrl={
              data?.pages[0].results[0].backdrop_path
                ? IMAGE_BASE_URL +
                  BACKDROP_SIZE +
                  data.pages[0].results[0].backdrop_path
                : "/no_image.jgp"
            }
            title={data?.pages[0].results[0].title}
            text={data?.pages[0].results[0].overview}
          />
        ) : null}

        <Grid
          className="p-4 m-auto max-w-7xl"
          title={
            query
              ? `Search Results: ${data?.pages[0].total_results}`
              : "Popular Movies"
          }
        >
          {data && data.pages
            ? data.pages.map((page) =>
                page.results.map((movie, i) => {
                  if (page.results.length === i + 1) {
                    return (
                      <Link key={movie.id} href={`/${movie.id}`}>
                        <div
                          ref={lastPostRef}
                          className="duration-300 cursor-pointer hover:opacity-80"
                        >
                          <Card
                            imgUrl={
                              movie.poster_path
                                ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`
                                : "/no_image.jpg"
                            }
                            title={movie.original_title}
                          />
                        </div>
                      </Link>
                    );
                  }
                  return (
                    <Link key={movie.id} href={`/${movie.id}`}>
                      <div className="duration-300 cursor-pointer hover:opacity-80">
                        <Card
                          imgUrl={
                            movie.poster_path
                              ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`
                              : "/no_image.jpg"
                          }
                          title={movie.original_title}
                        />
                      </div>
                    </Link>
                  );
                })
              )
            : null}
        </Grid>
        {isLoading || isFetching ? <Spinner /> : null}
      </main>
    </div>
  );
};

export default Home;
